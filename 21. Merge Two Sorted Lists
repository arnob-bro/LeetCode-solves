/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
    ListNode *curr_node1 = list1,*curr_node2 = list2;
    ListNode *list3 = NULL;
    
    if(curr_node1==NULL && curr_node2!=NULL)
    {
        return list2;
    }
    else if(curr_node1!=NULL && curr_node2==NULL)
    {
        return list1;
    }
    else if(curr_node1==NULL && curr_node2==NULL)
    {
        return list1;
    }
    
    ListNode *curr_node3 = list3;
    while(list1!=NULL || list2!=NULL)
    {
        if(list1->val<list2->val)
        {
            
            if(list3==NULL) 
            {
                list3 = list1;
                curr_node3 = list3;
            }
            else 
            {
                curr_node3->next = list1;
                curr_node3 = curr_node3->next;
            }
            list1=list1->next;
            
        }
        else
        {
            if(list3==NULL) 
            {
                list3 = list2;
                curr_node3 = list3;
            }
            else 
            {
                curr_node3->next = list2;
                curr_node3 = curr_node3->next;
            }
            list2=list2->next;
    }

        if(list1==NULL)
        {
            curr_node3->next = list2;
            break;
        }
        else if(list2==NULL)
        {
            curr_node3->next = list1;
            break;
        }
    }

    return list3;
    }
};
